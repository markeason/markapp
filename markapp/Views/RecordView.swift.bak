import SwiftUI

struct RecordView: View {
    @StateObject private var viewModel: RecordViewModel
    @Environment(\.dismiss) private var dismiss
    @State private var showingBookSelection = false
    @State private var showingStartPagePrompt = false
    @State private var showingEndPagePrompt = false
    @State private var startPage: String = ""
    @State private var endPage: String = ""
    
    init(viewModel: RecordViewModel? = nil) {
        if let viewModel = viewModel {
            _viewModel = StateObject(wrappedValue: viewModel)
        } else {
            _viewModel = StateObject(wrappedValue: RecordViewModel())
        }
    }
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color(.systemBackground).edgesIgnoringSafeArea(.all)
                
                if viewModel.currentSession == nil {
                    // Book selection state
                    VStack(spacing: 40) {
                        if !viewModel.books.isEmpty {
                            // Start reading view
                            VStack(spacing: 30) {
                                Text("Start Reading")
                                    .font(.system(size: 24, weight: .light))
                                    .foregroundColor(.secondary)
                                
                                Button {
                                    showingBookSelection = true
                                } label: {
                                    Text("Select Book")
                                        .font(.system(size: 18, weight: .medium))
                                        .frame(maxWidth: .infinity)
                                        .padding(.vertical, 16)
                                        .background(Color.blue)
                                        .foregroundColor(.white)
                                        .cornerRadius(12)
                                }
                                .padding(.horizontal, 40)
                            }
                        } else {
                            // Empty library state
                            VStack(spacing: 30) {
                                Image(systemName: "books.vertical")
                                    .font(.system(size: 60))
                                    .foregroundColor(.secondary)
                                
                                Text("No Books in Library")
                                    .font(.system(size: 24, weight: .light))
                                    .foregroundColor(.secondary)
                                
                                NavigationLink(destination: LibraryView()) {
                                    Text("Add Books")
                                        .font(.system(size: 18, weight: .medium))
                                        .frame(maxWidth: .infinity)
                                        .padding(.vertical, 16)
                                        .background(Color.blue)
                                        .foregroundColor(.white)
                                        .cornerRadius(12)
                                }
                                .padding(.horizontal, 40)
                            }
                        }
                    }
                } else {
                    // Active session view
                    VStack(spacing: 0) {
                        Spacer()
                        
                        // Book info
                        if let book = viewModel.selectedBook {
                            VStack(spacing: 8) {
                                Text(book.title)
                                    .font(.system(size: 20, weight: .medium))
                                    .foregroundColor(.secondary)
                                
                                Text("Page \(viewModel.startPage ?? 0)")
                                    .font(.system(size: 16, weight: .light))
                                    .foregroundColor(.secondary)
                            }
                            .padding(.bottom, 40)
                        }
                        
                        // Timer
                        Text(viewModel.formattedElapsedTime)
                            .font(.system(size: 72, weight: .light))
                            .monospacedDigit()
                            .foregroundColor(.primary)
                            .padding(.bottom, 20)
                        
                        // Audio waveform (only visible when recording)
                        if viewModel.transcriptionManager.isRecording {
                            AudioWaveformView(levels: viewModel.transcriptionManager.audioLevels, color: .blue)
                                .frame(height: 50)
                                .padding(.horizontal)
                        }
                        
                        // Recording indicator
                        if viewModel.transcriptionManager.isRecording {
                            HStack(spacing: 10) {
                                Circle()
                                    .fill(Color.red)
                                    .frame(width: 10, height: 10)
                                Text("Recording voice")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .padding(.top, 5)
                            .padding(.bottom, 20)
                        } else if !viewModel.transcriptionManager.permissionGranted {
                            Text("Microphone access required for voice recording")
                                .font(.caption)
                                .foregroundColor(.red)
                                .padding(.vertical, 10)
                        }
                        
                        // Transcript display area (toggled by button)
                        if viewModel.showingTranscript && !viewModel.transcriptionManager.transcript.isEmpty {
                            ScrollView {
                                VStack(alignment: .leading) {
                                    Text("Live Transcript")
                                        .font(.headline)
                                        .padding(.bottom, 5)
                                    
                                    Text(viewModel.transcriptionManager.transcript)
                                        .font(.body)
                                        .foregroundColor(.primary)
                                }
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .padding()
                                .background(Color(.systemGray6))
                                .cornerRadius(12)
                            }
                            .frame(maxHeight: 150)
                            .padding(.horizontal)
                            .padding(.bottom, 20)
                        }
                        
                        // Controls
                        HStack(spacing: 20) {
                            Button {
                                viewModel.togglePause()
                            } label: {
                                VStack(spacing: 8) {
                                    Image(systemName: viewModel.isPaused ? "play.fill" : "pause.fill")
                                        .font(.system(size: 24))
                                    Text(viewModel.isPaused ? "Resume" : "Pause")
                                        .font(.system(size: 14, weight: .medium))
                                }
                                .foregroundColor(.blue)
                                .frame(width: 80)
                            }
                            
                            Button {
                                showingEndPagePrompt = true
                            } label: {
                                VStack(spacing: 8) {
                                    Image(systemName: "checkmark")
                                        .font(.system(size: 24))
                                    Text("Finish")
                                        .font(.system(size: 14, weight: .medium))
                                }
                                .foregroundColor(.green)
                                .frame(width: 80)
                            }
                            
                            Button {
                                viewModel.cancelReading()
                            } label: {
                                VStack(spacing: 8) {
                                    Image(systemName: "xmark")
                                        .font(.system(size: 24))
                                    Text("Cancel")
                                        .font(.system(size: 14, weight: .medium))
                                }
                                .foregroundColor(.red)
                                .frame(width: 80)
                            }
                            
                            Button {
                                viewModel.toggleTranscript()
                            } label: {
                                VStack(spacing: 8) {
                                    Image(systemName: "text.bubble")
                                        .font(.system(size: 24))
                                    Text("Transcript")
                                        .font(.system(size: 14, weight: .medium))
                                }
                                .foregroundColor(.blue)
                                .frame(width: 80)
                            }
                        }
                        
                        Spacer()
                    }
                }
            }
            .navigationTitle("Record Reading")
            .sheet(isPresented: $showingBookSelection) {
                BookSelectionView(books: viewModel.books) { selectedBook in
                    viewModel.selectBook(selectedBook)
                    if viewModel.getLastSessionPage(for: selectedBook) == nil {
                        showingStartPagePrompt = true
                    } else {
                        viewModel.startReading(startPage: nil)
                    }
                }
            }
            .sheet(isPresented: $showingStartPagePrompt) {
                PagePromptView(
                    title: "Starting Page",
                    message: "What page are you starting on?",
                    initialPage: viewModel.selectedBook?.currentPage ?? 1,
                    maxPages: viewModel.selectedBook?.totalPages ?? 1000
                ) { page in
                    viewModel.startReading(startPage: page)
                }
            }
            .sheet(isPresented: $showingEndPagePrompt) {
                PagePromptView(
                    title: "Finishing Page",
                    message: "What page did you finish on?",
                    initialPage: viewModel.startPage ?? 1,
                    maxPages: viewModel.selectedBook?.totalPages ?? 1000
                ) { page in
                    viewModel.finishReading(endPage: page)
                    dismiss()
                }
            }
        }
        .onAppear {
            viewModel.loadBooks()
        }
    }
}

struct BookSelectionView: View {
    @Environment(\.dismiss) private var dismiss
    let books: [Book]
    let onSelect: (Book) -> Void
    
    var body: some View {
        NavigationStack {
            List(books) { book in
                Button {
                    onSelect(book)
                    dismiss()
                } label: {
                    HStack {
                        if let coverURLString = book.coverURL {
                            ImprovedCoverImageView(
                                coverURLString: coverURLString,
                                width: 40,
                                height: 60
                            )
                        }
                        
                        VStack(alignment: .leading) {
                            Text(book.title)
                                .font(.headline)
                            Text(book.author)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    }
                    .contentShape(Rectangle())
                }
                .buttonStyle(PlainButtonStyle())
            }
            .navigationTitle("Select a Book")
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct PagePromptView: View {
    @Environment(\.dismiss) private var dismiss
    let title: String
    let message: String
    let initialPage: Int
    let maxPages: Int
    let onSelect: (Int) -> Void
    
    @State private var selectedPage: Int
    
    init(title: String, message: String, initialPage: Int, maxPages: Int, onSelect: @escaping (Int) -> Void) {
        self.title = title
        self.message = message
        self.initialPage = initialPage
        self.maxPages = maxPages
        self.onSelect = onSelect
        _selectedPage = State(initialValue: initialPage)
    }
    
    var body: some View {
        NavigationStack {
            VStack(spacing: 30) {
                Text(message)
                    .font(.headline)
                    .multilineTextAlignment(.center)
                    .padding(.top)
                
                Picker("Page", selection: $selectedPage) {
                    ForEach(1...maxPages, id: \.self) { page in
                        Text("\(page)").tag(page)
                    }
                }
                .pickerStyle(WheelPickerStyle())
                
                Button {
                    onSelect(selectedPage)
                    dismiss()
                } label: {
                    Text("Confirm")
                        .font(.headline)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding(.horizontal, 50)
                .padding(.bottom)
            }
            .padding()
            .navigationTitle(title)
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
        }
    }
}
